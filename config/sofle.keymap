/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 * https://www.youtube.com/watch?v=8wZ8FRwOzhU ben cormack on layers
 * Andrej Mosat softle keyboard layout for ZMK v1 
 * v 0.2 beautiful clicking sound 
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/bt.h>


/ {

/ {
    behaviors {
       as: auto_shift {
               compatible = "zmk,behavior-hold-tap";
               label = "AutoShift";
               #binding-cells = <2>;
               tapping-term-ms = <200>;
               quick_tap_ms = <0>;
               flavor = "tap-preferred";
               bindings = <&kp>, <&kp>;
       };
    };

    keymap {
        compatible = "zmk,keymap";

        default_layer {
// ------------------------------------------------------------------------------------------------------------
// |  ESC  |  1  |  2  |  3   |  4   |  5   |                   |  6   |  7    |  8    |  9   |   0   |   -   |
// |  TAB  |  Q  |  W  |  E   |  R   |  T   |                   |  Y   |  U    |  I    |  O   |   P   | BKSPC |
// | GRAVE |  A  |  S  |  D   |  F   |  G   |                   |  H   |  J    |  K    |  L   |   ;   |   '   |
// | SHIFT |  Z  |  X  |  C   |  V   |  B   |  HOME  |  | END   |  N   |  M    |  ,    |  .   |   /   | SHIFT |
//               | GUI | CTRL | ALT  | LOWER|  SPACE |  | ENTER | RAISE| CTRL  | ALT   | GUI  |
            bindings = <
&kp ESC   &kp N1 &kp N2   &kp N3   &kp N4    &kp N5                          &kp N6 &kp N7    &kp N8    &kp N9   &kp N0   &kp MINUS
//&kp TAB   &kp Q  &kp W    &kp E    &kp R     &kp T                           &kp Y  &kp U     &kp I     &kp O    &kp P    &kp BSPC
//&kp GRAVE &kp A  &kp S    &kp D    &kp F     &kp G                           &kp H  &kp J     &kp K     &kp L    &kp SEMI &kp SQT
//&sk LSHFT &kp Z  &kp X    &kp C    &kp V     &kp B  &kp HOME        &kp END  &kp N  &kp M     &kp COMMA &kp DOT  &kp FSLH &sk RSHFT

&kp TAB   &as LS(Q) Q &as LS(W) W &as LS(E) E &as LS(R) R &as LS(T) T                  &as LS(Q) Q &as LS(W) W &as LS(E) E &as LS(R) R &as LS(T) T  &kp BSPC
&kp GRAVE &as LS(A) A &as LS(S) S &as LS(D) D &as LS(F) F &as LS(G) G                  &as LS(H) H &as LS(J) J &as LS(K) K &as LS(L) L &kp SEMI     &kp SQT
&sk LSHFT &as LS(Z) Z &as LS(X) X &as LS(C) C &as LS(V) V &as LS(B) B  &kp HOME        &kp END  &as LS(N) N &as LS(M) M &as LS(COMMA) COMMA &as LS(DOT) DOT &as LS(FSLH) FSLH &mt RSHIFT PAR
                 &kp LGUI &kp LCTRL &kp LALT &mo 1  &mt LGUI SPACE  &lt 2 RET  &mo 2  &kp RCTRL &kp RALT  &kp RGUI
            >;

            sensor-bindings = <&inc_dec_kp LEFT RIGHT &inc_dec_kp UP DOWN>;
        };

        lower_layer {
// TODO: Some binds are waiting for shifted keycode support.
// ------------------------------------------------------------------------------------------------------------
// |       |  F1 |  F2 |  F3  |  F4  |  F5  |                   |  F6  |  F7   |  F8   |  F9  |  F10  |  F11  |
// | M^TAB |   1 |   2 |   3  |   4  |   5  |                   |   6  |   7   |   8   |   9  |    0  |  F12  |
// |       |  !  |  @  |  #   |  $   |  =   |                   |  ^   |  &    |  *    |  (   |   )   |   |   |
// |       |  =  |  -  |  {   |  }   |  +   |        |  |       |  [   |  ]    |  ;    |  :   |   \   |       |
//               |     |      |      |      |        |  |       |      |       |       |      |
            bindings = <
&trans      &kp F1    &kp F2    &kp F3      &kp F4    &kp F5                    &kp F6    &kp F7   &kp F8          &kp F9    &kp F10   &kp F11
&kp LG(TAB) &kp N1    &kp N2    &kp N3      &kp N4    &kp N5                    &kp N6    &kp N7   &kp N8          &kp N9    &kp N0    &kp F12
&trans      &kp EXCL  &kp AT    &kp HASH    &kp DLLR  &kp EQUAL                 &kp CARET &kp AMPS &kp KP_MULTIPLY &kp LPAR  &kp RPAR  &kp PIPE
&trans      &kp EQUAL &kp MINUS &kp LBRC &kp RBRC  &kp KP_PLUS  &trans   &trans &kp LBKT  &kp RBKT &kp SEMI        &kp COLON &kp BSLH  &trans
                    &trans    &trans      &trans    &trans    &trans   &trans &trans    &trans   &trans          &trans
            >;

            sensor-bindings = <&inc_dec_kp PG_UP PG_DN &inc_dec_kp PG_UP PG_DN>;
        };

        raise_layer {
// ------------------------------------------------------------------------------------------------------------
// |BTCLR| BT0  | BT1  |  BT2  |  BT3  |  BT5 |                |      |      |  PGUP |      |       |       |
// |     | INS  | PSCR | GUI   |       |      |                | PGUP |      |   ^   |      |       |  DEL  |
// |CAPS | ALT  | CTRL | SHIFT |       | CAPS |                | PGDN |   <- |   v   |  ->  |  DEL  | BKSPC |
// |     | UNDO | CUT  | COPY  | PASTE |      |      |  | HOME |      |      |  PGDN |      |       |       |
//              |      |       |       |      |      |  |      |      |      |       |      |
            bindings = <
&bt BT_CLR &bt BT_SEL 0 &bt BT_SEL 1 &bt BT_SEL 2 &bt BT_SEL 3 &bt BT_SEL 4             &trans    &trans    &kp PG_UP &trans    &trans  &trans
&trans     &kp INS      &kp PSCRN    &kp K_CMENU  &trans       &trans                   &kp PG_UP &trans    &kp UP    &trans    &kp N0  &kp DEL
&kp CLCK   &kp LALT     &kp LCTRL    &kp LSHFT    &trans       &kp CLCK                 &kp PG_DN &kp LEFT  &kp DOWN  &kp RIGHT &kp DEL &kp BSPC
&trans     &kp LG(Z)  &kp LG(X)  &kp LG(C)  &kp LG(V)  &trans  &trans  &kp HOME &trans    &trans    &kp PG_DN &trans    &trans  &trans
                        &trans       &trans       &trans       &trans  &trans  &trans   &trans    &trans    &trans    &trans
            >;

            sensor-bindings = <&inc_dec_kp PG_UP PG_DN &inc_dec_kp PG_UP PG_DN>;
        };
    };
};

//K_PASTE
//K_CUT
//K_UNDO
//K_COPY
//&out OUT_USB
//&out OUT_BLE
//&out OUT_TOG
//https://zmk.dev/docs/behaviors/outputs/
